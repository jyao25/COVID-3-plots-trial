# -*- coding: utf-8 -*-
"""Homework2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IG0sEkOZoXwm9uMTLLEly5wo3lefq9ad
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm

url_confirmed = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv'
dat = pd.read_csv(url_confirmed)

"""# **Italy**

preprocess
"""

# Filter the data for 'Italy' and remove unnecessary columns
x = dat[dat['Country/Region'] == 'Italy'].drop(["Province/State", "Country/Region", "Lat", "Long"], axis=1).unstack()

# Convert from tuple to array
x = np.asarray(x)

# Get case counts instead of cumulative counts
x = x[1:x.size] - x[0:(x.size - 1)]

# Get the first non-zero entry
x = x[np.min(np.where(x != 0)):x.size]

"""plot"""

# Plot new daily cases for Italy
plt.figure(figsize=(10, 6))
plt.plot(x, label='New Cases (Italy)')
plt.title("Italy - New Daily COVID-19 Cases")
plt.xlabel("Days since first case")
plt.ylabel("New cases")
plt.legend()
plt.show()

"""LOWESS smoother"""

# Get the number of days (size of x)
n = x.size
t = np.arange(0, n, 1)

# Apply LOWESS smoothing
lowess = sm.nonparametric.lowess
xhat = lowess(x, t, frac=.05, return_sorted=False)

# Plot both raw and smoothed data
plt.figure(figsize=(10, 6))
plt.plot(x, label='New Cases (Italy)')
plt.plot(xhat, label='Smoothed Cases (Italy)', color='red')
plt.title("Italy - Smoothed vs. Actual New Daily COVID-19 Cases")
plt.xlabel("Days since first case")
plt.ylabel("New cases")
plt.legend()
plt.show()

"""calculate residuals

plot residuals
"""

# Calculate the residuals
residuals = x - xhat

# Plot residuals
plt.figure(figsize=(10, 6))
plt.plot(residuals, label='Residuals (Italy)')
plt.title("Residuals between Actual and Smoothed Cases (Italy)")
plt.xlabel("Days since first case")
plt.ylabel("Residual (Actual - Smoothed)")
plt.legend()
plt.show()

"""Case Fatality Rate (CFR) calculation

*align death and daily cases array by time indexes*

*file missing values with 0*
"""

# Create a DataFrame for alignment
cases_df = pd.DataFrame({'cases': x})
deaths_df = pd.DataFrame({'deaths': deaths_italy})

# Align both DataFrames on their indices
aligned_df = cases_df.join(deaths_df, how='outer')

# Replace NaN values (if any) with 0
aligned_df = aligned_df.fillna(0)

# Calculate the cumulative sums for cases and deaths
cumulative_cases = np.cumsum(aligned_df['cases'])
cumulative_deaths = np.cumsum(aligned_df['deaths'])

# Calculate CFR as cumulative deaths / cumulative cases
cfr = cumulative_deaths / cumulative_cases

# Plot the Case Fatality Rate over time
plt.figure(figsize=(10, 6))
plt.plot(cfr, label='Case Fatality Rate (Italy)')
plt.title("Italy - Case Fatality Rate Over Time")
plt.xlabel("Days since first case")
plt.ylabel("CFR (Deaths / Cases)")
plt.legend()
plt.show()

"""# **China**

smoothed with Lowess
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm

# Load confirmed cases and deaths data from GitHub
url_confirmed = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv'
url_deaths = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv'

# Load the data into pandas DataFrames
dat_cases = pd.read_csv(url_confirmed)
dat_deaths = pd.read_csv(url_deaths)

# Filter data for China and remove unnecessary columns
cases_china = dat_cases[dat_cases['Country/Region'] == 'China'].drop(["Province/State", "Country/Region", "Lat", "Long"], axis=1).sum()  # Summing over all provinces
deaths_china = dat_deaths[dat_deaths['Country/Region'] == 'China'].drop(["Province/State", "Country/Region", "Lat", "Long"], axis=1).sum()

# Convert from cumulative to daily counts
cases_china = np.asarray(cases_china)[1:] - np.asarray(cases_china)[:-1]
deaths_china = np.asarray(deaths_china)[1:] - np.asarray(deaths_china)[:-1]

# Get the first non-zero day (removing days with 0 cases at the start)
cases_china = cases_china[np.min(np.where(cases_china != 0)):]
deaths_china = deaths_china[np.min(np.where(deaths_china != 0)):]

# Create a DataFrame for alignment
cases_df = pd.DataFrame({'cases': cases_china})
deaths_df = pd.DataFrame({'deaths': deaths_china})

# Align both DataFrames on their indices
aligned_df = cases_df.join(deaths_df, how='outer')

# Replace NaN values (if any) with 0
aligned_df = aligned_df.fillna(0)

# Calculate the cumulative sums for cases and deaths
cumulative_cases = np.cumsum(aligned_df['cases'])
cumulative_deaths = np.cumsum(aligned_df['deaths'])

# Calculate CFR as cumulative deaths / cumulative cases
cfr = cumulative_deaths / cumulative_cases

# Apply LOWESS smoothing to the case data
n = len(cases_china)
t = np.arange(0, n, 1)
lowess = sm.nonparametric.lowess
smoothed_cases = lowess(aligned_df['cases'], t, frac=.05, return_sorted=False)

# Plot both raw and smoothed new cases for China
plt.figure(figsize=(10, 6))
plt.plot(aligned_df['cases'], label='New Cases (China)')
plt.plot(smoothed_cases, label='Smoothed Cases (China)', color='red')
plt.title("China - Smoothed vs. Actual New Daily COVID-19 Cases")
plt.xlabel("Days since first case")
plt.ylabel("New cases")
plt.legend()
plt.show()

# Plot residuals (difference between actual and smoothed cases)
residuals = aligned_df['cases'] - smoothed_cases
plt.figure(figsize=(10, 6))
plt.plot(residuals, label='Residuals (China)')
plt.title("China - Residuals between Actual and Smoothed Cases")
plt.xlabel("Days since first case")
plt.ylabel("Residual (Actual - Smoothed)")
plt.legend()
plt.show()

# Plot the Case Fatality Rate over time
plt.figure(figsize=(10, 6))
plt.plot(cfr, label='Case Fatality Rate (China)')
plt.title("China - Case Fatality Rate Over Time")
plt.xlabel("Days since first case")
plt.ylabel("CFR (Deaths / Cases)")
plt.legend()
plt.show()

"""# **Zimbabwe**

smoothed with spline
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import UnivariateSpline

# Load confirmed cases and deaths data from GitHub
url_confirmed = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv'
url_deaths = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv'

# Load the data into pandas DataFrames
dat_cases = pd.read_csv(url_confirmed)
dat_deaths = pd.read_csv(url_deaths)

# Filter data for Zimbabwe and remove unnecessary columns
cases_zimbabwe = dat_cases[dat_cases['Country/Region'] == 'Zimbabwe'].drop(["Province/State", "Country/Region", "Lat", "Long"], axis=1).sum()  # Zimbabwe has no provinces
deaths_zimbabwe = dat_deaths[dat_deaths['Country/Region'] == 'Zimbabwe'].drop(["Province/State", "Country/Region", "Lat", "Long"], axis=1).sum()

# Convert from cumulative to daily counts
cases_zimbabwe = np.asarray(cases_zimbabwe)[1:] - np.asarray(cases_zimbabwe)[:-1]
deaths_zimbabwe = np.asarray(deaths_zimbabwe)[1:] - np.asarray(deaths_zimbabwe)[:-1]

# Get the first non-zero day (removing days with 0 cases at the start)
cases_zimbabwe = cases_zimbabwe[np.min(np.where(cases_zimbabwe != 0)):]
deaths_zimbabwe = deaths_zimbabwe[np.min(np.where(deaths_zimbabwe != 0)):]

# Create a DataFrame for alignment
cases_df = pd.DataFrame({'cases': cases_zimbabwe})
deaths_df = pd.DataFrame({'deaths': deaths_zimbabwe})

# Align both DataFrames on their indices
aligned_df = cases_df.join(deaths_df, how='outer')

# Replace NaN values (if any) with 0
aligned_df = aligned_df.fillna(0)

# Calculate the cumulative sums for cases and deaths
cumulative_cases = np.cumsum(aligned_df['cases'])
cumulative_deaths = np.cumsum(aligned_df['deaths'])

# Calculate CFR as cumulative deaths / cumulative cases
cfr = cumulative_deaths / cumulative_cases

# Apply cubic spline smoothing to the case data
n = len(cases_zimbabwe)
t = np.arange(0, n, 1)

# Use UnivariateSpline for cubic spline smoothing, adjusting s for less aggressive smoothing
spline = UnivariateSpline(t, aligned_df['cases'], s=200)  # Adjust 's' to a smaller value for less smoothing
smoothed_cases = spline(t)

# Plot both raw and smoothed new cases for Zimbabwe with more distinction
plt.figure(figsize=(10, 6))
plt.plot(aligned_df['cases'], label='New Cases (Zimbabwe)', alpha=0.6, color='blue')  # Adding transparency
plt.plot(smoothed_cases, label='Smoothed Cases (Zimbabwe) - Spline', color='red', linestyle='--', linewidth=2)  # Dashed line for the smoothed version
plt.title("Zimbabwe - Smoothed vs. Actual New Daily COVID-19 Cases (Spline)")
plt.xlabel("Days since first case")
plt.ylabel("New cases")
plt.legend()
plt.show()

# Plot residuals (difference between actual and smoothed cases)
residuals = aligned_df['cases'] - smoothed_cases
plt.figure(figsize=(10, 6))
plt.plot(residuals, label='Residuals (Zimbabwe)')
plt.title("Zimbabwe - Residuals between Actual and Smoothed Cases")
plt.xlabel("Days since first case")
plt.ylabel("Residual (Actual - Smoothed)")
plt.legend()
plt.show()

# Plot the Case Fatality Rate over time
plt.figure(figsize=(10, 6))
plt.plot(cfr, label='Case Fatality Rate (Zimbabwe)')
plt.title("Zimbabwe - Case Fatality Rate Over Time")
plt.xlabel("Days since first case")
plt.ylabel("CFR (Deaths / Cases)")
plt.legend()
plt.show()

"""# **Brazil**

smoothed by lowess
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import UnivariateSpline

# Load confirmed cases and deaths data from GitHub
url_confirmed = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv'
url_deaths = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv'

# Load the data into pandas DataFrames
dat_cases = pd.read_csv(url_confirmed)
dat_deaths = pd.read_csv(url_deaths)

# Filter data for Brazil and remove unnecessary columns
cases_brazil = dat_cases[dat_cases['Country/Region'] == 'Brazil'].drop(["Province/State", "Country/Region", "Lat", "Long"], axis=1).sum()  # Brazil has no provinces in this dataset
deaths_brazil = dat_deaths[dat_deaths['Country/Region'] == 'Brazil'].drop(["Province/State", "Country/Region", "Lat", "Long"], axis=1).sum()

# Convert from cumulative to daily counts
cases_brazil = np.asarray(cases_brazil)[1:] - np.asarray(cases_brazil)[:-1]
deaths_brazil = np.asarray(deaths_brazil)[1:] - np.asarray(deaths_brazil)[:-1]

# Get the first non-zero day (removing days with 0 cases at the start)
cases_brazil = cases_brazil[np.min(np.where(cases_brazil != 0)):]
deaths_brazil = deaths_brazil[np.min(np.where(deaths_brazil != 0)):]

# Create a DataFrame for alignment
cases_df = pd.DataFrame({'cases': cases_brazil})
deaths_df = pd.DataFrame({'deaths': deaths_brazil})

# Align both DataFrames on their indices
aligned_df = cases_df.join(deaths_df, how='outer')

# Replace NaN values (if any) with 0
aligned_df = aligned_df.fillna(0)

# Calculate the cumulative sums for cases and deaths
cumulative_cases = np.cumsum(aligned_df['cases'])
cumulative_deaths = np.cumsum(aligned_df['deaths'])

# Calculate CFR as cumulative deaths / cumulative cases
cfr = cumulative_deaths / cumulative_cases

# Apply cubic spline smoothing to the case data
n = len(cases_brazil)
t = np.arange(0, n, 1)

# Use UnivariateSpline for cubic spline smoothing, adjusting s for optimal smoothing
spline = UnivariateSpline(t, aligned_df['cases'], s=200)  # Adjust 's' to control smoothness
smoothed_cases = spline(t)

# Plot both raw and smoothed new cases for Brazil with more distinction
plt.figure(figsize=(10, 6))
plt.plot(aligned_df['cases'], label='New Cases (Brazil)', alpha=0.6, color='blue')  # Adding transparency
plt.plot(smoothed_cases, label='Smoothed Cases (Brazil) - Spline', color='red', linestyle='--', linewidth=2)  # Dashed line for the smoothed version
plt.title("Brazil - Smoothed vs. Actual New Daily COVID-19 Cases (Spline)")
plt.xlabel("Days since first case")
plt.ylabel("New cases")
plt.legend()
plt.show()

# Plot residuals (difference between actual and smoothed cases)
residuals = aligned_df['cases'] - smoothed_cases
plt.figure(figsize=(10, 6))
plt.plot(residuals, label='Residuals (Brazil)')
plt.title("Brazil - Residuals between Actual and Smoothed Cases")
plt.xlabel("Days since first case")
plt.ylabel("Residual (Actual - Smoothed)")
plt.legend()
plt.show()

# Plot the Case Fatality Rate over time
plt.figure(figsize=(10, 6))
plt.plot(cfr, label='Case Fatality Rate (Brazil)')
plt.title("Brazil - Case Fatality Rate Over Time")
plt.xlabel("Days since first case")
plt.ylabel("CFR (Deaths / Cases)")
plt.legend()
plt.show()